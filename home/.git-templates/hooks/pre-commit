#!/bin/sh

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

patch_filename=$(mktemp -t commit_hook_changes)
git diff --exit-code --binary --ignore-submodules --no-color > $patch_filename
has_unstaged_changes=$?

if [[ $has_unstaged_changes != 0 ]]; then
    echo "Stashing unstaged changes in $patch_filename."
    git checkout -- .
fi

function quit {
    if [[ $has_unstaged_changes != 0 ]]; then
        git apply $patch_filename
        if [[ $? != 0 ]]; then
            git checkout -- .
            git apply $patch_filename
        fi
    fi

    exit $1
}


# Redirect output to stderr.
exec 1>&2

files_with_nocommit=$(git diff --cached --name-only --diff-filter=ACM $against | xargs -I{} grep -i "nocommit" -l {} | tr '\n' ' ')

if [[ "x${files_with_nocommit}x" != "xx" ]]; then
    tput setaf 1
    echo "File being committed with 'nocommit' in it:"
    IFS=$'\n'
    for f in $(git diff --cached --name-only --diff-filter=ACM $against | xargs -I{} grep -i "nocommit" -l {}); do
        echo $f
    done
    tput sgr0
    quit 1
fi

files_with_ns_metadata=$(git diff --cached --name-only --diff-filter=ACM $against | xargs -I{} grep -i '(ns.*^' -l {} | tr '\n' ' ')

if [[ "x${files_with_ns_metadata}x" != "xx" ]]; then
    tput setaf 1
    echo "File being committed with ns metadata on it:"
    IFS=$'\n'
    for f in $(git diff --cached --name-only --diff-filter=ACM $against | xargs -I{} grep -i '(ns.*^' -l {}); do
        echo $f
    done
    tput sgr0
    quit 1
fi

quit 0

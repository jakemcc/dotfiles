#!/usr/bin/env bb
(require '[clojure.java.shell :refer [sh]])
(require '[clojure.string :as string])

(defn run! [cmd]
  (let [{:keys [exit out err]} (apply sh cmd)]
    (if (zero? exit) ;; should maybe throw?
      out
      (throw (ex-info "Failed to run a command!" {:exit exit
                                                  :err err})))))

(defn extract-url [url-line]
  (if-not (string/starts-with? url-line "URL:")
    (throw (ex-info "Expected line starting with URL:" {:line url-line}))
    (let [parts (mapv string/trim (string/split url-line #":"))]
      (cond
        (= (count parts) 3)
        {:host (second parts) :directory (last parts)}

        (= (count parts) 2)
        {:host "localhost" :directory (last parts)}))))

(defn delete-command [data]
  (let [host (get-in data [:url :host])
        root (get-in data [:url :directory])
        files (mapv (fn [file] (str root "/" file))
                    (get data :files))]
    (when (seq files)
      [(str "rm " (string/join " " files))])))

(defn delete-files! [data]
  (when-let [cmd (not-empty (delete-command data))]
    (println (string/join " " cmd))))

(defn parse-mutagen
  ([lines] (parse-mutagen lines {}))
  ([lines data]
   (if (seq lines)
     (let [line (first lines)
           remaining (rest lines)]
       (cond
         (= line "Alpha:")
         (recur (rest remaining)
                (assoc-in data [:alpha :url] (extract-url (first remaining))))
         
         (= line "Beta:")
         (recur (rest remaining)
                (assoc-in data [:beta :url] (extract-url (first remaining))))

         (string/starts-with? line "(alpha)")
         (recur remaining
                (update-in data [:alpha :files] (fnil conj []) (second (string/split line #"\s"))))

         (string/starts-with? line "(beta)")
         (recur remaining
                (update-in data [:beta :files] (fnil conj []) (second (string/split line #"\s+"))))

         :else (recur remaining data)))
     data)))

(defn mutagen-data [sync-name]
  (->> (run! ["mutagen" "sync" "list" sync-name])
       string/split-lines
       (mapv string/trim)
       parse-mutagen))

(defn work [sync-name]
  (let [data (mutagen-data sync-name)]
    (delete-files! (:beta data))))

(defn help []
  (binding [*out* *err*]
    (println "Need to supply a sync identifier as first argument, found from `mutagen sync list`")
    (let [potential-identifiers (->> (run! ["mutagen" "sync" "list"])
                                     string/split-lines
                                     (mapv string/trim)
                                     (filter (fn [line] (string/starts-with? line "Name:")))
                                     (map (fn [line] (string/replace line "Name: " ""))))]
      (println "Human readable identifiers: " (string/join ", " potential-identifiers))))
  (System/exit 1))

(if-let [sync-name (first *command-line-args*)]
  (work sync-name)
  (help))

